# -*- coding: utf-8 -*-
"""Derie_Dariant.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JuedSth8Ddy70fmiBU8osSs4gTziK7ZD

# Proyek Analisis Data: Nama dataset
- Nama: Derie Dariant
- Email: dariant1109@gmail.com
- Id Dicoding: dicoding.com/users/deriedariant/academies

## Menentukan Pertanyaan Bisnis

- pertanyaan 1 :
Bagaimana pertumbuhan penjualan perusahaan dalam periode 5 tahun terakhir?
- pertanyaan 2 :
Produk apa yang memiliki penjualan terbanyak dan terkecil dalam periode 5 tahun terakhir?
- pertanyaan 3 :
Produk apa yang memiliki revenue terbesar dan terkecil dalam periode 5 tahun terakhir?
- pertanyaan 4 :
Produk apa yang memiliki profit terbesar dan terkecil dalam periode 5 tahun terakhir?
- pertanyaan 5 :
Bagaimana hasil analisa penjualan produk dalam periode 5 tahun terakhir menggunakan metode RFM?

## Menyaipkan semua library yang dibuthkan
"""

#menyiapkan semua library yang dibutuhkan
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Wrangling

### Gathering Data
"""

#mengestrak data csv ke google colab
orders_df = pd.read_csv('order_items_dataset.csv')
products_df = pd.read_csv('products_dataset.csv')

"""### Assessing Data

#####Assessing orders_df
"""

#menampilkan kolom data orders_df
orders_df.head()

#identifikasi missing value pada data orders_df
orders_df.isna().sum()

"""tidak terdapat missing value pada data orders_df"""

#Identifikasi duplicate data pada data orders_df
print('Duplikat:',orders_df.duplicated().sum())

"""tidak terdapat duplicate data pada data orders_df"""

#identifikasi jumlah data & tipe data orders_df
orders_df.info()

"""- tidak terdapat perbedaan jumlah data dari setiap kolom & terdapat 3 type data (object, int & float) pada data orders_df
- terdapat kesalahan format/type data pada kolom/atribute shipping_limit_date, karena seharusnya menggunakan type 'datetime'
"""

#identifikasi kolom numerik menggunakan parameter statistik
orders_df.describe()

"""data orders_df memiliki outlier pada nilai max, karena terdapat perbedaan yang sangat jauh dibandingkan nilai-nilai sebelumnya

#####Assessing product_df
"""

#menampilkan kolom pada data products_df
products_df.head()

#identifikasi missing value pada data products_df
products_df.isna().sum()

"""data products_df memiliki missing value hampir disemua kolomnya"""

#Identifikasi duplicate data pada data products_df
print('Duplikat:',products_df.duplicated().sum())

"""tidak terdapat duplicate data pada data products_df"""

#identifikasi jumlah data & tipe data products_df
products_df.info()

"""data products_df tediri dari type data object & float, terdapat perbedaan jumlah data yang cukup signifikan antar kolom, hal ini disebabkan karena terdapat missing value pada data product_df"""

#identifikasi kolom numerik menggunakan parameter statistik
products_df.describe()

"""data products_df memiliki outlier pada nilai max dibeberapa kolom, terlihat perbedaan yang signifikan dibandingkan nilai-nilai sebelumnya

### Cleaning Data

#####Cleaning data orders_df
"""

#cleaning outlier pada kolom 'order_item_id pada data orders_df dengan mengganti dengan upper limit value
q1 = orders_df['order_item_id'].quantile(0.25)
q3 = orders_df['order_item_id'].quantile(0.75)
iqr = q3 - q1
q1, q3, iqr
lower_limit = q1 - (1.5*iqr)
upper_limit = q3 + (1.5*iqr)
lower_limit, upper_limit
order_item_id_df = orders_df.copy()
order_item_id_df.loc[order_item_id_df['order_item_id']>upper_limit,'order_item_id'] = upper_limit
order_item_id_df.loc[order_item_id_df['order_item_id']<lower_limit,'order_item_id'] = lower_limit

#cleaning outlier pada kolom 'price' pada data orders_df dengan mengganti dengan upper limit value
price_df = order_item_id_df.copy()
q1 = price_df['price'].quantile(0.25)
q3 = price_df['price'].quantile(0.75)
iqr = q3 - q1
q1, q3, iqr
lower_limit = q1 - (1.5*iqr)
upper_limit = q3 + (1.5*iqr)
lower_limit, upper_limit
price_df.loc[price_df['price']>upper_limit,'price'] = upper_limit
price_df.loc[price_df['price']<lower_limit,'price'] = lower_limit

#cleaning outlier pada kolom 'freight_value' pada data orders_df dengan mengganti dengan upper limit value
order_items_df = price_df.copy()
q1 = order_items_df['freight_value'].quantile(0.25)
q3 = order_items_df['freight_value'].quantile(0.75)
iqr = q3 - q1
q1, q3, iqr
lower_limit = q1 - (1.5*iqr)
upper_limit = q3 + (1.5*iqr)
lower_limit, upper_limit
order_items_df.loc[order_items_df['freight_value']>upper_limit,'freight_value'] = upper_limit
order_items_df.loc[order_items_df['freight_value']<lower_limit,'freight_value'] = lower_limit
order_items_df.describe()
#semua outlier pada data orders_df telah diganti dengan nilai upper limit dan disimpan dalam order_items_df

"""semua outlier pada data orders_df telah dihilangkan dengan cara menggantinya dengan nilai upper_limit, hasil tersebut disimpan dalam order_items_df"""

#melakukan pemeriksaan data kembali
order_items_df.info()

"""tidak terjadi pengurangan/ penghapusan data, namun masih terdapat kesalahan format pada atribut shipping_limit_date"""

#melakukan perubahan format atribut shipping_limit_date
datetime_columns = ['shipping_limit_date']
for column in datetime_columns :
  order_items_df[column] = pd.to_datetime(order_items_df[column])
order_items_df.info()

"""format shipping_limit_date berhasil diubah menjadi format 'datetime'

#####Cleaning products_df
"""

#melakukan pembersihkan nilai Nan pada data products_df
products_notna_df = products_df.dropna()
products_notna_df.isna().sum()

"""value dengan nilai NaN akan dihapus dengan mengasumsikan pada kasus ini, bahwa perusahaan belum melakukan pendataan pada product tersebut,sehingga perusahan memutuskan untuk menghapus product yang belum terdata tersebut

semua data NaN telah dihapus dari products_df dan disimpan didalam products_notna_df
"""

products_notna_df.describe()

"""masih terdapat outlier didalam data products_notna_df"""

#membersihkan outlier pada atribut 'product_description_lenght' pada products_notna_df dengan menggantinya dengan upper limit value
q1 = products_notna_df['product_description_lenght'].quantile(0.25)
q3 = products_notna_df['product_description_lenght'].quantile(0.75)
iqr = q3 - q1
q1,q3,iqr
lower_limit = q1 - (1.5*iqr)
upper_limit = q3 + (1.5*iqr)
lower_limit, upper_limit
products_notna_df.loc[products_notna_df['product_description_lenght']>upper_limit, 'product_description_lenght'] = upper_limit
products_notna_df.loc[products_notna_df['product_description_lenght']<lower_limit, 'product_description_lenght'] = lower_limit

#membersihkan outlier pada atribut 'product_photos_qty' pada products_notna_df dengan menggantinya dengan upper limit value
product_photos_qty_df  = products_notna_df.copy()
q1 = product_photos_qty_df['product_photos_qty'].quantile(0.25)
q3 = product_photos_qty_df['product_photos_qty'].quantile(0.75)
iqr = q3 - q1
q1,q3,iqr
lower_limit = q1 - (1.5*iqr)
upper_limit = q3 + (1.5*iqr)
lower_limit, upper_limit
product_photos_qty_df.loc[product_photos_qty_df['product_photos_qty']>upper_limit, 'product_photos_qty'] = upper_limit
product_photos_qty_df.loc[product_photos_qty_df['product_photos_qty']<lower_limit, 'product_photos_qty'] = lower_limit

#membersihkan outlier pada atribut 'product_weight_g' pada products_notna_df dengan menggantinya dengan upper limit value
product_weight_g_df  = product_photos_qty_df.copy()
q1 = product_weight_g_df['product_weight_g'].quantile(0.25)
q3 = product_weight_g_df['product_weight_g'].quantile(0.75)
iqr = q3 - q1
q1,q3,iqr
lower_limit = q1 - (1.5*iqr)
upper_limit = q3 + (1.5*iqr)
lower_limit, upper_limit
product_weight_g_df.loc[product_weight_g_df['product_weight_g']>upper_limit, 'product_weight_g'] = upper_limit
product_weight_g_df.loc[product_weight_g_df['product_weight_g']<lower_limit, 'product_weight_g'] = lower_limit

#membersihkan outlier pada atribut 'product_length_cm' pada products_notna_df dengan menggantinya dengan upper limit value
product_length_cm_df  = product_weight_g_df.copy()
q1 = product_length_cm_df['product_length_cm'].quantile(0.25)
q3 = product_length_cm_df['product_length_cm'].quantile(0.75)
iqr = q3 - q1
q1,q3,iqr
lower_limit = q1 - (1.5*iqr)
upper_limit = q3 + (1.5*iqr)
lower_limit, upper_limit
product_length_cm_df.loc[product_length_cm_df['product_length_cm']>upper_limit, 'product_length_cm'] = upper_limit
product_length_cm_df.loc[product_length_cm_df['product_length_cm']<lower_limit, 'product_length_cm'] = lower_limit

#membersihkan outlier pada atribut 'product_height_cm' pada products_notna_df dengan menggantinya dengan upper limit value
product_height_cm_df  = product_length_cm_df.copy()
q1 = product_height_cm_df['product_height_cm'].quantile(0.25)
q3 = product_height_cm_df['product_height_cm'].quantile(0.75)
iqr = q3 - q1
lower_limit = q1 - (1.5*iqr)
upper_limit = q3 + (1.5*iqr)
product_height_cm_df.loc[product_height_cm_df['product_height_cm']>upper_limit, 'product_height_cm'] = upper_limit
product_height_cm_df.loc[product_height_cm_df['product_height_cm']<lower_limit, 'product_height_cm'] = lower_limit

#membersihkan outlier pada atribut 'product_width_cm' pada products_notna_df dengan menggantinya dengan upper limit value
products_name_df  = product_height_cm_df.copy()
q1 = products_name_df['product_width_cm'].quantile(0.25)
q3 = products_name_df['product_width_cm'].quantile(0.75)
iqr = q3 - q1
lower_limit = q1 - (1.5*iqr)
upper_limit = q3 + (1.5*iqr)
products_name_df.loc[products_name_df['product_width_cm']>upper_limit, 'product_width_cm'] = upper_limit
products_name_df.loc[products_name_df['product_width_cm']<lower_limit, 'product_width_cm'] = lower_limit
products_name_df.describe()

"""semua outlier pada data products_notna_df telah diganti dengan nilai upper_limit dan disimpan dalam products_name_df"""

products_name_df.info()

"""terjadi pengurangan jumlah data, karena penghapusan nilai NaN pada data

## Exploratory Data Analysis (EDA)

#####Menyiapkan data untuk analisis
"""

all_df = pd.merge(
    left = order_items_df,
    right = products_name_df,
    how = 'left',
    left_on = 'product_id',
    right_on = 'product_id')
all_df.head()

all_df['profit'] = all_df['price'] - all_df['freight_value']

all_df.rename(columns={'shipping_limit_date':'order_date', 'product_category_name':'product_name','product_weight_g':'product_weight'},inplace=True)
all_df.head()

"""pertama-tama data order_item_df dan products_name_df digabungkan untuk mempermudah proses analisis, setelah itu beberapa kolom/atribut yang akan digunakan diubah namanya untuk mempermudah proses analisis.

Keterangan :
- order_id merupakan orderan/pembelian yang dilakukan customer
- date_order merupakan waktu customer melakukan pembelian
- price merupakan harga untuk setiap produk dijual
- product_name merupakan nama produk yang dijual oleh perusahaan
- product_weight merupakan jumlah produk(kg) yang dibeli customer
- freight value merupakan biaya kirim produk ke customer
- profit merupakan keuntungan bersih yang diterima perusahaan setelah dikurangi ongkos kirim (freight_value)
- mata uang menggunakan US Dollar ($)

#####sales by month
"""

monthly_orders_df = all_df.resample(rule='M', on='order_date').agg({
    "order_id": "nunique",
    "price": "sum",
    "profit" : 'sum'
})
monthly_orders_df.index = monthly_orders_df.index.strftime('%Y-%m')
monthly_orders_df = monthly_orders_df.reset_index()
monthly_orders_df.rename(columns={
    "order_id": "order_count",
    "price": "revenue"
}, inplace=True)
monthly_orders_df.head()

"""membuat format tanggal dalam bentuk Tahun & Bulan"""

monthly_orders_df.groupby(by ='order_date').order_count.sum().sort_values(ascending = False)

"""mengurutkan bulan berdasarkan orderan terbanyak"""

monthly_orders_df.groupby(by ='order_date').revenue.sum().sort_values(ascending = False)

"""mengurutkan bulan berdasarkan revenue terbesar"""

monthly_orders_df.groupby(by ='order_date').profit.sum().sort_values(ascending = False)

"""mengurutkan bulan berdasarkan profit terbesar

#####sales by order
"""

all_df.groupby(by ='product_name').order_id.nunique().sort_values(ascending = False)

"""Mengurutkan product_name berdasarkan orderan terbanyak

#####sales by product
"""

all_df.groupby(by ='product_name').product_weight.sum().sort_values(ascending = False)

"""Mengurutkan product_name berdasarkan penjualan terbanyak

#####sales by revenue
"""

all_df.groupby(by ='product_name').price.sum().sort_values(ascending = False)

"""Mengurutkan product_name berdasarkan revenue terbesar

#####sales by profit
"""

all_df.groupby(by ='product_name').agg({'price':'sum', 'freight_value':'sum','profit':'sum'}).sort_values(by ='profit', ascending = False)

"""profit dihitung dengan cara mengurangi price dengan freight_value, sehingga didapatkan data yang diurutkan berdasarkan profit terbesar seperti yang terlihat pada array diatas"""

all_df.to_csv("all_data.csv", index=False)

"""## Visualization & Explanatory Analysis

## Pertanyaan

### Pertanyaan 1:

Bagaimana pertumbuhan penjualan perusahaan dalam periode 5 tahun terakhir?

### Pertanyaan 2:

Produk apa yang memiliki penjualan terbanyak dan terkecil dalam periode 5 tahun terakhir?

### Pertanyaan 3:

Produk apa yang memiliki revenue terbesar dan terkecil dalam periode 5 tahun terakhir?

### Pertanyaan 4:

Produk apa yang memiliki profit terbesar dan terkecil dalam periode 5 tahun terakhir?

### Pertanyaan 5:

Bagaimana hasil analisa penjualan produk dalam periode 5 tahun terakhir menggunakan metode RFM?

## Conclusion

#####Conclusion pertanyaan 1
"""

year_orders_df = all_df.resample(rule='Y', on='order_date').agg({
    "order_id": "nunique",
    "product_weight":'sum',
    "price": "sum",
    "freight_value": 'sum',
    "profit" : 'sum'
})
year_orders_df.head()

monthly_orders_df = all_df.resample(rule='Y', on='order_date').agg({
    "order_id": "nunique",
    "price": "sum"
})
monthly_orders_df.index = monthly_orders_df.index.strftime('%Y')

monthly_orders_df = monthly_orders_df.reset_index()
monthly_orders_df.rename(columns={
    "order_id": "order_count"
}, inplace=True)


plt.figure(figsize=(10, 5))
plt.plot(monthly_orders_df["order_date"], monthly_orders_df["order_count"], marker='o', linewidth=2, color="#72BCD4")
plt.title("Number of Orders per Year", loc="center", fontsize=20)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.show()

monthly_orders_df = all_df.resample(rule='Y', on='order_date').agg({"product_weight": "sum"})
monthly_orders_df.index = monthly_orders_df.index.strftime('%Y')

monthly_orders_df = monthly_orders_df.reset_index()
plt.figure(figsize=(10, 5))
plt.plot(monthly_orders_df["order_date"], monthly_orders_df["product_weight"], marker='o', linewidth=2, color="#72BCD4")
plt.title("Number of Sales per Year", loc="center", fontsize=20)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.show()

monthly_orders_df = all_df.resample(rule='Y', on='order_date').agg({"profit": "sum"})
monthly_orders_df.index = monthly_orders_df.index.strftime('%Y')

monthly_orders_df = monthly_orders_df.reset_index()
monthly_orders_df.rename(columns={
    "price": "revenue"
}, inplace=True)

plt.figure(figsize=(10, 5))
plt.plot(monthly_orders_df["order_date"], monthly_orders_df["profit"], marker='o', linewidth=2, color="#72BCD4")
plt.title("Number of Profit per Year", loc="center", fontsize=20)
plt.xticks(fontsize=10)
plt.yticks(fontsize=10)
plt.show()

"""Berdasarkan hasil analisa yang ditunjukkan 3 line chart diatas, kita dapat menyimpulkan bahwa pada 3 tahun pertama, pertumbuhan penjualan perusahaan sangat signfikan. Titik pucah penjualan perusahaan berada pada tahun 2018 dengan total orderan sebanyak 54,771 orderan, total penjualan sebanyak 80,598,393.0 Kg dan total profit sebesar 5,028,700.30 US Dollar. Namun pada tahun 2019 terjadi penurunan yang sangat signifikan dimana pada tahun 2019 perusahaan tidak mampu menjual satupun produk, hal ini berlanjut hingga tahun 2020, dimana perusahaan hanya mampu melakukan 3 kali penjualan(orderan) dengan berat produk yang dijual sebesar 16,600 Kg dan menghasil profit sebesar 250.09 US Dollar per April 2020.

#####Conclusion pertanyaan 2
"""

sum_order_items_df = all_df.groupby("product_name").product_weight.sum().sort_values(ascending=False).reset_index()
sum_order_items_df.head(5)

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(24, 6))

colors = ["#72BCD4", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3"]

sns.barplot(x="product_weight", y="product_name", data=sum_order_items_df.head(5), palette=colors, ax=ax[0])
ax[0].set_ylabel(None)
ax[0].set_xlabel(None)
ax[0].set_title("Best Performing Product", loc="center", fontsize=15)
ax[0].tick_params(axis ='y', labelsize=12)

sns.barplot(x="product_weight", y="product_name", data=sum_order_items_df.sort_values(by="product_weight", ascending=True).head(5), palette=colors, ax=ax[1])
ax[1].set_ylabel(None)
ax[1].set_xlabel(None)
ax[1].invert_xaxis()
ax[1].yaxis.set_label_position("right")
ax[1].yaxis.tick_right()
ax[1].set_title("Worst Performing Product", loc="center", fontsize=15)
ax[1].tick_params(axis='y', labelsize=12)

plt.suptitle("Best and Worst Performing Product by Number of Sales", fontsize=20)
plt.show()

"""Berdasarkan hasil analisa yang ditunjukkan Bar Plot diatas, dapat disimpulkan cama_mesa_banho menjadi produk dengan penjualan terbanyak dengan total 17,716,796.00 Kg untuk periode penjualan 5 tahun terakhir.

Sedangkan untuk produk dengan penjualan terendah adalah seguros_e_servicos dengan total penjualan sebesar 1,625.00 Kg untuk periode penjualan 5 tahun terakhir.

#####Conclusion pertanyaan 3
"""

revenue_order_items_df = all_df.groupby("product_name").price.sum().sort_values(ascending=False).reset_index()
revenue_order_items_df.head(5)

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(24, 6))

colors = ["#72BCD4", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3"]

sns.barplot(x="product_name", y="price", data=revenue_order_items_df.head(5), palette=colors, ax=ax[0])
ax[0].set_ylabel('Revenue')
ax[0].set_xlabel(None)
ax[0].set_title("Best Performing Product", loc="center", fontsize=15)
ax[0].tick_params(axis ='x', labelsize=12, rotation=30)

sns.barplot(x="product_name", y="price", data=revenue_order_items_df.sort_values(by="price", ascending=True).head(5), palette=colors, ax=ax[1])
ax[1].set_ylabel('Revenue')
ax[1].set_xlabel(None)
ax[1].invert_xaxis()
ax[1].yaxis.set_label_position("right")
ax[1].yaxis.tick_right()
ax[1].set_title("Worst Performing Product", loc="center", fontsize=15)
ax[1].tick_params(axis='x', labelsize=12, rotation=30)

plt.suptitle("Best and Worst Performing Product by Number of Revenue", fontsize=20)
plt.show()

"""Revenue merupakan pendapatan yang didapatkan oleh perusahaan dari hasil penjualan suatu produk/ barang. Berdasarkan hasil analisa yang ditunjukkan Bar Plot diatas, dapat disimpulkan bahwa cama_mesa_banho menjadi produk dengan revenue terbesar dengan total 1,000,342.80 US Dollar untuk periode penjualan 5 tahun terakhir.

Sedangkan untuk produk dengan revenue terendah adalah seguros_e_servicos dengan total revenue sebesar 283.29 US Dollar untuk periode penjualan 5 tahun terakhir.

#####Conclusion pertanyaan 4
"""

profit_order_items_df = all_df.groupby("product_name").profit.sum().sort_values(ascending=False).reset_index()
profit_order_items_df.head(5)

fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(24, 6))

colors = ["#72BCD4", "#D3D3D3", "#D3D3D3", "#D3D3D3", "#D3D3D3"]

sns.barplot(x="product_name", y="profit", data=profit_order_items_df.head(5), palette=colors, ax=ax[0])
ax[0].set_ylabel('Profit')
ax[0].set_xlabel(None)
ax[0].set_title("Best Performing Product", loc="center", fontsize=15)
ax[0].tick_params(axis ='x', labelsize=12, rotation=30)

sns.barplot(x="product_name", y="profit", data=profit_order_items_df.sort_values(by="profit", ascending=True).head(5), palette=colors, ax=ax[1])
ax[1].set_ylabel('Profit')
ax[1].set_xlabel(None)
ax[1].invert_xaxis()
ax[1].yaxis.set_label_position("right")
ax[1].yaxis.tick_right()
ax[1].set_title("Worst Performing Product", loc="center", fontsize=15)
ax[1].tick_params(axis='x', labelsize=12, rotation=30)

plt.suptitle("Best and Worst Performing Product by Number of Profit", fontsize=20)
plt.show()

"""Profit merupakan pendapatan yang didapatkan oleh perusahaan dengan cara mengurangkan revenue dengan freight_value, nilai profit akan selalu lebih kecil dibandingkan dengan nilai revenue karena nilai tersebut dikurangi freight_value sebagai biaya. Berdasarkan hasil analisa yang ditunjukkan Bar Plot diatas, dapat disimpulkan bahwa beleza_saude menjadi produk dengan revenue terbesar dengan total 834,625.90 US Dollar untuk periode penjualan 5 tahun terakhir. Jika pada revenue nilai cama_mesa_banho lebih besar dibandingkan beleza_saude, maka pada profit justru beleza_saude lebih besar dibandingkan cama_mesa_banho, hal ini menunjukkan cama_mesa_banho memiliki nilai freight_value lebih besar dibandingkan beleza_saude sehingga profit yang diterima perusahaan menjadi  lebih kecil.

Sedangkan untuk produk dengan profit terendah adalah seguros_e_servicos dengan total revenue sebesar 242.07 US Dollar untuk periode penjualan 5 tahun terakhir.

#####Conclusion pertanyaan 5
"""

all_df.head()

rfm_df = all_df.groupby(by="product_name", as_index=False).agg({
    "order_date": "max", # mengambil tanggal order terakhir
    "order_id": "nunique", # menghitung jumlah order
    "profit": "sum" # menghitung jumlah profit yang dihasilkan
})
rfm_df.columns = ["product_name", "max_order_timestamp", "frequency", "monetary"]
 # menghitung kapan terakhir pelanggan melakukan transaksi (hari)
rfm_df["max_order_timestamp"] = rfm_df["max_order_timestamp"].dt.date
recent_date = all_df["order_date"].dt.date.max()
rfm_df["recency"] = rfm_df["max_order_timestamp"].apply(lambda x: (recent_date - x).days)

rfm_df.drop("max_order_timestamp", axis=1, inplace=True)
rfm_df.head()

fig, ax = plt.subplots(nrows=1, ncols=3, figsize=(25, 8))

colors = ["#72BCD4", "#72BCD4", "#72BCD4", "#72BCD4", "#72BCD4"]

sns.barplot(y="recency", x="product_name", data=rfm_df.sort_values(by="recency", ascending=True).head(5), palette=colors, ax=ax[0])
ax[0].set_ylabel(None)
ax[0].set_xlabel(None)
ax[0].set_title("By Recency (days)", loc="center", fontsize=18)
ax[0].tick_params(axis ='x', labelsize=15,rotation =30)

sns.barplot(y="frequency", x="product_name", data=rfm_df.sort_values(by="frequency", ascending=False).head(5), palette=colors, ax=ax[1])
ax[1].set_ylabel(None)
ax[1].set_xlabel(None)
ax[1].set_title("By Frequency", loc="center", fontsize=18)
ax[1].tick_params(axis='x', labelsize=15,rotation =30)

sns.barplot(y="monetary", x="product_name", data=rfm_df.sort_values(by="monetary", ascending=False).head(5), palette=colors, ax=ax[2])
ax[2].set_ylabel(None)
ax[2].set_xlabel(None)
ax[2].set_title("By Monetary", loc="center", fontsize=18)
ax[2].tick_params(axis='x', labelsize=15,rotation =30)

plt.suptitle("Best Customer Based on RFM Parameters (product_name)", fontsize=20)
plt.show()

"""Berdasarkan analisa menggunakan metode RFM yang ditunjukkan bar plot diatas, kita dapat membuat kesimpulan sebagai berikut :
- utilidades_domesticas, cama_mesa_banho, automotivo, telefonia & cool_stuff merupakan 5 produk terakhir yang diorder oleh consumen.
- cama_mesa_banho, beleza_saude, esporte_lazer, informatica_acessorios & moveis_decoracao adalah produk yang paling banyak terjual dalam periode penjualan 5 tahun terakhir.
- beleza_saude, cama_mesa_banho, relogios_presentes, esporte_lazer & informatica_acessorios merupakan produk yang memberikan profit terbesar ke perusahaan dalam periode penjualan 5 tahun terakhir.
"""